Help on module threaded:

NAME
    threaded - threaded multitasking

FILE
    threaded.py

CLASSES
    Queue.Queue
        Threaded
            Iterative
                Pipelining
    FuncInfo
    IterableTask
    Synchronized
    
    class FuncInfo
     |  information about a function call
     |  
     |  Methods defined here:
     |  
     |  __init__(self, func, output, *args, **kwargs)
    
    class IterableTask
     |  a task with discrete steps
     |  
     |  Methods defined here:
     |  
     |  __call__(self)
     |  
     |  __init__(self)
     |  
     |  __iter__(self)
     |  
     |  next(self)
     |      perform the next step (usually without a return value)
    
    class Iterative(Threaded)
     |  when nthreads > 0, distributes tasks between a set number of handlers
     |  
     |  otherwise, uses Threaded's default behavior
     |  
     |  Method resolution order:
     |      Iterative
     |      Threaded
     |      Queue.Queue
     |  
     |  Methods defined here:
     |  
     |  __init__(self, nthreads=1, queue_output=False, sleep=0.001)
     |  
     |  execute(self, func, *args, **kwargs)
     |      add the task to the queue
     |  
     |  kill_all(self)
     |      passively attempt to kill all the threads
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Queue.Queue:
     |  
     |  empty(self)
     |      Return True if the queue is empty, False otherwise (not reliable!).
     |  
     |  full(self)
     |      Return True if the queue is full, False otherwise (not reliable!).
     |  
     |  get(self, block=True, timeout=None)
     |      Remove and return an item from the queue.
     |      
     |      If optional args 'block' is true and 'timeout' is None (the default),
     |      block if necessary until an item is available. If 'timeout' is
     |      a non-negative number, it blocks at most 'timeout' seconds and raises
     |      the Empty exception if no item was available within that time.
     |      Otherwise ('block' is false), return an item if one is immediately
     |      available, else raise the Empty exception ('timeout' is ignored
     |      in that case).
     |  
     |  get_nowait(self)
     |      Remove and return an item from the queue without blocking.
     |      
     |      Only get an item if one is immediately available. Otherwise
     |      raise the Empty exception.
     |  
     |  join(self)
     |      Blocks until all items in the Queue have been gotten and processed.
     |      
     |      The count of unfinished tasks goes up whenever an item is added to the
     |      queue. The count goes down whenever a consumer thread calls task_done()
     |      to indicate the item was retrieved and all work on it is complete.
     |      
     |      When the count of unfinished tasks drops to zero, join() unblocks.
     |  
     |  put(self, item, block=True, timeout=None)
     |      Put an item into the queue.
     |      
     |      If optional args 'block' is true and 'timeout' is None (the default),
     |      block if necessary until a free slot is available. If 'timeout' is
     |      a non-negative number, it blocks at most 'timeout' seconds and raises
     |      the Full exception if no free slot was available within that time.
     |      Otherwise ('block' is false), put an item on the queue if a free slot
     |      is immediately available, else raise the Full exception ('timeout'
     |      is ignored in that case).
     |  
     |  put_nowait(self, item)
     |      Put an item into the queue without blocking.
     |      
     |      Only enqueue the item if a free slot is immediately available.
     |      Otherwise raise the Full exception.
     |  
     |  qsize(self)
     |      Return the approximate size of the queue (not reliable!).
     |  
     |  task_done(self)
     |      Indicate that a formerly enqueued task is complete.
     |      
     |      Used by Queue consumer threads.  For each get() used to fetch a task,
     |      a subsequent call to task_done() tells the queue that the processing
     |      on the task is complete.
     |      
     |      If a join() is currently blocking, it will resume when all items
     |      have been processed (meaning that a task_done() call was received
     |      for every item that had been put() into the queue).
     |      
     |      Raises a ValueError if called more times than there were items
     |      placed in the queue.
    
    class Pipelining(Iterative)
     |  pipeline iterable tasks;
     |  tasks must be iterable, preferably subclassing IterableTask
     |  
     |  this class continually requeues unfinished tasks
     |  
     |  Method resolution order:
     |      Pipelining
     |      Iterative
     |      Threaded
     |      Queue.Queue
     |  
     |  Methods defined here:
     |  
     |  __init__(self, *args, **kwargs)
     |  
     |  execute(self, iterable_task)
     |      accepts iterable tasks instead of functions
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Iterative:
     |  
     |  kill_all(self)
     |      passively attempt to kill all the threads
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Queue.Queue:
     |  
     |  empty(self)
     |      Return True if the queue is empty, False otherwise (not reliable!).
     |  
     |  full(self)
     |      Return True if the queue is full, False otherwise (not reliable!).
     |  
     |  get(self, block=True, timeout=None)
     |      Remove and return an item from the queue.
     |      
     |      If optional args 'block' is true and 'timeout' is None (the default),
     |      block if necessary until an item is available. If 'timeout' is
     |      a non-negative number, it blocks at most 'timeout' seconds and raises
     |      the Empty exception if no item was available within that time.
     |      Otherwise ('block' is false), return an item if one is immediately
     |      available, else raise the Empty exception ('timeout' is ignored
     |      in that case).
     |  
     |  get_nowait(self)
     |      Remove and return an item from the queue without blocking.
     |      
     |      Only get an item if one is immediately available. Otherwise
     |      raise the Empty exception.
     |  
     |  join(self)
     |      Blocks until all items in the Queue have been gotten and processed.
     |      
     |      The count of unfinished tasks goes up whenever an item is added to the
     |      queue. The count goes down whenever a consumer thread calls task_done()
     |      to indicate the item was retrieved and all work on it is complete.
     |      
     |      When the count of unfinished tasks drops to zero, join() unblocks.
     |  
     |  put(self, item, block=True, timeout=None)
     |      Put an item into the queue.
     |      
     |      If optional args 'block' is true and 'timeout' is None (the default),
     |      block if necessary until a free slot is available. If 'timeout' is
     |      a non-negative number, it blocks at most 'timeout' seconds and raises
     |      the Full exception if no free slot was available within that time.
     |      Otherwise ('block' is false), put an item on the queue if a free slot
     |      is immediately available, else raise the Full exception ('timeout'
     |      is ignored in that case).
     |  
     |  put_nowait(self, item)
     |      Put an item into the queue without blocking.
     |      
     |      Only enqueue the item if a free slot is immediately available.
     |      Otherwise raise the Full exception.
     |  
     |  qsize(self)
     |      Return the approximate size of the queue (not reliable!).
     |  
     |  task_done(self)
     |      Indicate that a formerly enqueued task is complete.
     |      
     |      Used by Queue consumer threads.  For each get() used to fetch a task,
     |      a subsequent call to task_done() tells the queue that the processing
     |      on the task is complete.
     |      
     |      If a join() is currently blocking, it will resume when all items
     |      have been processed (meaning that a task_done() call was received
     |      for every item that had been put() into the queue).
     |      
     |      Raises a ValueError if called more times than there were items
     |      placed in the queue.
    
    class Synchronized
     |  Methods defined here:
     |  
     |  __init__(self, value=None)
     |  
     |  get(self)
     |  
     |  modify(self, func=<function <lambda>>)
     |      modify the value via a function
     |  
     |  set(self, value=None)
    
    class Threaded(Queue.Queue)
     |  allocates up to N additional threads for function calls (w/ blocking)
     |  or run function calls in the current thread if nthreads == 0
     |  
     |  when nthreads == 0, tasks are executed in the calling thread
     |  when nthreads < 0, tasks are always executed in a new thread
     |  
     |  when queue_output evaluates to True, function call information is
     |  queued into .output_queue as FuncInfo instances
     |  
     |  Methods defined here:
     |  
     |  __init__(self, nthreads=-1, queue_output=False)
     |  
     |  execute(self, func, *args, **kwargs)
     |      block until thread allocation is possible
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Queue.Queue:
     |  
     |  empty(self)
     |      Return True if the queue is empty, False otherwise (not reliable!).
     |  
     |  full(self)
     |      Return True if the queue is full, False otherwise (not reliable!).
     |  
     |  get(self, block=True, timeout=None)
     |      Remove and return an item from the queue.
     |      
     |      If optional args 'block' is true and 'timeout' is None (the default),
     |      block if necessary until an item is available. If 'timeout' is
     |      a non-negative number, it blocks at most 'timeout' seconds and raises
     |      the Empty exception if no item was available within that time.
     |      Otherwise ('block' is false), return an item if one is immediately
     |      available, else raise the Empty exception ('timeout' is ignored
     |      in that case).
     |  
     |  get_nowait(self)
     |      Remove and return an item from the queue without blocking.
     |      
     |      Only get an item if one is immediately available. Otherwise
     |      raise the Empty exception.
     |  
     |  join(self)
     |      Blocks until all items in the Queue have been gotten and processed.
     |      
     |      The count of unfinished tasks goes up whenever an item is added to the
     |      queue. The count goes down whenever a consumer thread calls task_done()
     |      to indicate the item was retrieved and all work on it is complete.
     |      
     |      When the count of unfinished tasks drops to zero, join() unblocks.
     |  
     |  put(self, item, block=True, timeout=None)
     |      Put an item into the queue.
     |      
     |      If optional args 'block' is true and 'timeout' is None (the default),
     |      block if necessary until a free slot is available. If 'timeout' is
     |      a non-negative number, it blocks at most 'timeout' seconds and raises
     |      the Full exception if no free slot was available within that time.
     |      Otherwise ('block' is false), put an item on the queue if a free slot
     |      is immediately available, else raise the Full exception ('timeout'
     |      is ignored in that case).
     |  
     |  put_nowait(self, item)
     |      Put an item into the queue without blocking.
     |      
     |      Only enqueue the item if a free slot is immediately available.
     |      Otherwise raise the Full exception.
     |  
     |  qsize(self)
     |      Return the approximate size of the queue (not reliable!).
     |  
     |  task_done(self)
     |      Indicate that a formerly enqueued task is complete.
     |      
     |      Used by Queue consumer threads.  For each get() used to fetch a task,
     |      a subsequent call to task_done() tells the queue that the processing
     |      on the task is complete.
     |      
     |      If a join() is currently blocking, it will resume when all items
     |      have been processed (meaning that a task_done() call was received
     |      for every item that had been put() into the queue).
     |      
     |      Raises a ValueError if called more times than there were items
     |      placed in the queue.

